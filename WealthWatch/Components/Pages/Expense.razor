@page "/expense"
@using WealthWatch.Models
@using WealthWatch.Services
@inject TransactionService transactionService
@inject SessionService session
@inject UserService userService
@inject TagService tag

<div class="income-body">
    <header class="header">
        <div class="user-info">
            <div class="user-avatar"></div>
            <span>@currentUser</span>
        </div>
        <div class="balance">
            Total Expense: <strong>@TotalExpenseAmount</strong>
        </div>
    </header>

    <main class="main-content">
        <div class="income-container">
            <div class="income-header">
                <h1>Expense</h1>
            </div>
            <div class="income-filter-div">
                <div class="date-filter">
                    <label for="start-date">Start Date</label>
                    <input type="date" id="start-date" name="start-date" @bind=FromDate />

                    <label for="end-date">End Date</label>
                    <input type="date" id="end-date" name="end-date" @bind=ToDate />
                </div>
                <div class="div-add-income-btn">
                    <button class="add-income-btn">Add Expense</button>
                </div>
            </div>

            <table class="income-table">
                <thead>
                    <tr>
                        <th>Description</th>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Tag</th>
                        <th>Note</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in FilteredTransactions)
                    {
                        <tr>
                            <td>@transaction.Description</td>
                            <td><span class="date">@transaction.Date</span></td>
                            <td>@transaction.Amount </td>
                            <td>@transaction.Tag</td>
                            <td>@transaction.Note</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <form class="add-income-form">
            <h2 class="form-title">Add Expense</h2>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger" role="alert">@ErrorMessage</div>
            }
            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <div class="alert alert-success" role="alert">@SuccessMessage</div>
            }
            <div class="form-group">
                <label for="description">Description</label>
                <input type="text" @bind=newtransactions.Description id="description" name="description" required />
            </div>
            <div class="form-group">
                <label for="incomeDate">Date</label>
                <input type="date" @bind=newtransactions.Date id="incomeDate" name="incomeDate" required />
            </div>
            <div class="form-group">
                <label for="amount">Amount</label>
                <input type="number" @bind=newtransactions.Amount id="amount" name="amount" required />
            </div>
            <div class="form-group">
                <label for="tags">Tags</label>
                <select @bind="newtransactions.Tag" id="tags" name="tags" required>
                    <option value="">Select a Tag</option>
                    @foreach (var tag in allTags)
                    {
                        <option value="@tag.TagName">@tag.TagName</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="note">Note</label>
                <input type="text" @bind=newtransactions.Note id="note" name="note" />
            </div>
            <input type="hidden" @bind=newtransactions.Type />
            <button type="submit" class="submit-btn" @onclick="HandleSubmit">ADD Expense</button>
        </form>
    </main>
</div>

@code {
    private Guid userId;
    private string currentUser;
    private string SuccessMessage;
    private string ErrorMessage;
    private Transactions newtransactions = new Transactions();
    private List<Transactions> listOfTransactions = new List<Transactions>();
    private int TotalExpenseAmount;
    private int ExpenseAmount;
    //for displaying tags
    private List<Tags> allTags = new List<Tags>();

    private DateTime? FromDate;
    private DateTime? ToDate;

    // Filter data based on the FromDate and ToDate
    private IEnumerable<Transactions> FilteredTransactions => listOfTransactions
    .Where(t =>
        (!FromDate.HasValue || t.Date.Date >= FromDate.Value.Date) &&
        (!ToDate.HasValue || t.Date.Date <= ToDate.Value.Date));

    protected override async Task OnInitializedAsync()
    {
        newtransactions.Type = "expense";

        var checkuserId = session.GetCurrentUserId();
        if (checkuserId == null || checkuserId == Guid.Empty)
        {
            ErrorMessage = "Invalid user session. Please log in again.";
            await DisplayMessageWithDelay();
            return;
        }

        currentUser = await userService.GetNameByIdAsync(checkuserId.Value);
        userId = checkuserId.Value;

        TotalExpenseAmount = await transactionService.GetAmountByTypeAsync(userId, "expense");

        //load tags
        allTags = await tag.GetAllTagsAsync();

        await LoadIncome();
    }

    private async Task LoadIncome()
    {
        listOfTransactions = await transactionService.GetTransactionsByTypeAsync(userId, "expense");
    }

    private async Task HandleSubmit()
    {
        ErrorMessage = null;
        SuccessMessage = null;

        // Validation for Source
        if (string.IsNullOrWhiteSpace(newtransactions.Description))
        {
            ErrorMessage = "Description is required.";
            await DisplayMessageWithDelay();
            return;
        }

        // Validation for Amount
        if (string.IsNullOrWhiteSpace(newtransactions.Amount) || !decimal.TryParse(newtransactions.Amount, out decimal amount) || amount <= 0)
        {
            ErrorMessage = "Valid amount is required.";
            await DisplayMessageWithDelay();
            return;
        }
        if (string.IsNullOrWhiteSpace(newtransactions.Tag))
        {
            ErrorMessage = "Tag is required.";
            await DisplayMessageWithDelay();
            return;
        }

        ExpenseAmount = TotalExpenseAmount + int.Parse(newtransactions.Amount);
        bool v = await CheckSufficientBalanace(ExpenseAmount);
        bool BalanceCheck = v;
        if (!BalanceCheck)
        {
            ErrorMessage = "No sufficient balance.";
            await DisplayMessageWithDelay();
            return;
        }

        bool result = await transactionService.CreateTransactionAsync(userId, newtransactions);

        if (result)
        {
            SuccessMessage = "Transaction added successfully!";
            await DisplayMessageWithDelay();
        }
        else
        {
            ErrorMessage = "Failed to add transaction!";
        }

        await DisplayMessageWithDelay();
    }

    private async Task DisplayMessageWithDelay()
    {
        StateHasChanged();
        await Task.Delay(3000);
        ErrorMessage = null;
        SuccessMessage = null;
        StateHasChanged();
        return;
    }

    private async Task<bool> CheckSufficientBalanace(int ExpenseAmount)
    {
        int IncomeAmount = await  transactionService.GetAmountByTypeAsync(userId, "income");
        int DebtAmount = await  transactionService.GetAmountByTypeAsync(userId, "debt");

        if((IncomeAmount+DebtAmount) > ExpenseAmount)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

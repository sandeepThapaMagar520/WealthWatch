@page "/"
@using WealthWatch.Components.Layout
@layout NoNav
@using WealthWatch.Services
@using WealthWatch.Models
@inject UserService Service
@inject SessionService SessionService
@inject NavigationManager NavigationManager;


    <div class="login-container">
        <div class="login-box">
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                    <div class="alert alert-danger" role="alert">
                    @ErrorMessage
                    </div>
            }
            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                    <div class="alert alert-success" role="alert">
                    @SuccessMessage
                    </div>
            }
            <h1>Login</h1>

            <div class="form-group">
                <label for="Email">Email</label>
                <input type="text" @bind="Email" class="form-control" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" @bind="Password" class="form-control" />
            </div>

            <button class="login-button" id="loginButton" @onclick="handleLogin">Log In</button>

            <div class="signup-link">
                Don't have an account? <a href="signup">Sign up</a>
            </div>
        </div>
    </div>


@code {
    private string Email;
    private string Password;
    private string ErrorMessage;
    private string SuccessMessage;

    private async Task handleLogin()
    {
        // Check if the fields are empty
        if (string.IsNullOrWhiteSpace(Email))
        {
            ErrorMessage = "Email is required.";
            StateHasChanged();
            await Task.Delay(3000);
            ErrorMessage = null;
            StateHasChanged();
            return;
        }
        if (string.IsNullOrWhiteSpace(Password))
        {
            ErrorMessage = "Password is required.";
            StateHasChanged();
            await Task.Delay(3000);
            ErrorMessage = null;
            StateHasChanged();
            return;
        }

        // Validate user credentials
        Users? user = await Service.GetUserByEmailAsync(Email);

        if (user == null)
        {
            ErrorMessage = "Sorry, no user found!";
            StateHasChanged();
            await Task.Delay(3000);
            ErrorMessage = null;
            StateHasChanged();
            return;
        }

        if (Password != user.Password)
        {
            ErrorMessage = "Invalid email or password!";
            StateHasChanged();
            await Task.Delay(3000);
            ErrorMessage = null;
            StateHasChanged();
            return;
        }

        // Successful login: Start the session
        SessionService.StartSession(user.Id);
        SuccessMessage = "Login successful!";
        StateHasChanged();

        // Navigate to the Expenses page
        await Task.Delay(1000);
        NavigationManager.NavigateTo("/dashboard");
    }
}

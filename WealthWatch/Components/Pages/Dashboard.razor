@page "/dashboard"
@using WealthWatch.Services
@using WealthWatch.Models
@inject TransactionService transactionService
@inject SessionService session
@inject UserService userService

<!-- Date Range Filter Above the Header -->
<section class="date-filter-section">
    <label for="from-date">From</label>
    <input type="date" id="from-date" class="date-filter" @bind="FromDate" />

    <label for="to-date">To</label>
    <input type="date" id="to-date" class="date-filter" @bind="ToDate" />
</section>

<!-- Tag Filter Section -->
<section class="tag-filter-section">
    <label for="tag-filter">Filter by Tag</label>
    <select id="tag-filter" class="tag-filter" @bind="SelectedTag">
        <option value="">All Tags</option>
        @foreach (var tag in AllTags)
        {
            <option value="@tag">@tag</option>
        }
    </select>
</section>

<!-- Type Filter Section -->
<section class="type-filter-section">
    <label for="type-filter">Filter by Type</label>
    <select id="type-filter" class="type-filter" @bind="SelectedType">
        <option value="">All Types</option>
        <option value="income">Income</option>
        <option value="expense">Expense</option>
        <option value="debt">Debt</option>
    </select>
</section>

<header class="header">
    <div class="user-info">
        <div class="user-avatar"></div>
        <span>@currentUser</span>
    </div>
    <div class="balance">
        Available Balance: <strong>@Balance</strong>
    </div>
</header>

<div class="financial-summary">
    <div class="summary-card summary-inflow">
        <div class="summary-label">Cash Inflows</div>
        <div class="summary-value">@TotalInFlow</div>
    </div>
    <div class="summary-card summary-outflow">
        <div class="summary-label">Cash Outflow</div>
        <div class="summary-value">@TotalOutFlow</div>
    </div>
    <div class="summary-card summary-outflow">
        <div class="summary-label">Total debts</div>
        <div class="summary-value">@TotalDebts</div>
    </div>
    <div class="summary-card summary-clear-debts">
        <div class="summary-label">Clear Debts</div>
        <div class="summary-value">@ClearedDebt</div>
    </div>
    <div class="summary-card summary-remaining-debts">
        <div class="summary-label">Remaining Debts</div>
        <div class="summary-value">@RemainingDebt</div>
    </div>
</div>

<section class="cash-flow-chart">
    <h2 class="section-title">Monthly Cash Inflow and Outflow</h2>
    <div class="chart-placeholder"></div>
</section>

<section class="data-table-section">
    <div class="table-controls">
        <h2 class="section-title">Transaction</h2>
        <div class="filter-controls">
            <input type="search" class="search-input" placeholder="Search">
        </div>
    </div>
    <table class="data-table">
        <thead>
            <tr>
                <th>Description</th>
                <th>Type</th>
                <th>Tag</th>
                <th>Date</th>
                <th>Amount</th>
                <th>Note</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in FilteredTransactions)
            {
                <tr>
                    <td>@transaction.Description</td>
                    <td>@transaction.Type</td>
                    <td>@transaction.Tag</td>
                    <td>@transaction.Date.ToString("d MMM yyyy")</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.Note</td>
                </tr>
            }
        </tbody>
    </table>
</section>

<section class="data-table-section">
    <div class="table-controls">
        <h2 class="section-title">Pending Debts</h2>
        <div class="filter-controls">
            <input type="search" class="search-input" placeholder="Search">
        </div>
    </div>
    <table class="data-table">
        <thead>
            <tr>
                <th>Description</th>
                <th>Amount</th>
                <th>Due Date</th>
                <th>Action</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in FilteredDebts)
            {
                <tr>
                    <td>@transaction.Source</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.DueDate?.ToString("d MMM yyyy")</td>
                    <td>
                        @if (transaction.Status == "Completed")
                        {
                            <p style="color: green;">@transaction.Pay</p>
                        }
                        else
                        {
                            <a style="color: red;">@transaction.Pay</a>
                        }
                    </td>
                    <td>
                        <span class="status @(transaction.Status == "Completed" ? "completed" : "incomplete")">@transaction.Status</span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</section>

@code {
    private int Balance;
    private Guid userId;
    private string currentUser;
    private string ErrorMessage;
    private string SuccessMessage;
    private int TotalInFlow;
    private int TotalOutFlow;
    private int ClearedDebt;
    private int RemainingDebt;
    private int TotalDebts;

    private DateTime? FromDate { get; set; }
    private DateTime? ToDate { get; set; }

    private string SelectedTag { get; set; }
    private string SelectedType { get; set; } // Added type filter for income, expense, debt
    private List<string> AllTags = new List<string>(); // List to store all tags

    private List<Transactions> AllTransactions = new List<Transactions>();
    private List<Transactions> AllDebts = new List<Transactions>();

    // Filtered transactions based on the selected date range, type, and tag
    private IEnumerable<Transactions> FilteredTransactions => AllTransactions
        .Where(t =>
            (!FromDate.HasValue || t.DueDate >= FromDate) &&
            (!ToDate.HasValue || t.DueDate <= ToDate) &&
            (string.IsNullOrEmpty(SelectedTag) || t.Tag == SelectedTag) &&
            (string.IsNullOrEmpty(SelectedType) || t.Type == SelectedType) // Added type filtering here
        );

    // Filtered debts based on the selected date range, status, type, and tag
    private IEnumerable<Transactions> FilteredDebts => AllDebts
        .Where(t =>
            t.Status == "Incomplete" && // Filter for incomplete debts
            (string.IsNullOrEmpty(SelectedType) || t.Type == SelectedType) && // Filter by type
            (!FromDate.HasValue || t.DueDate >= FromDate) &&
            (!ToDate.HasValue || t.DueDate <= ToDate) &&
            (string.IsNullOrEmpty(SelectedTag) || t.Tag == SelectedTag)
        );

    protected override async Task OnInitializedAsync()
    {
        var checkuserId = session.GetCurrentUserId();
        if (checkuserId == null || checkuserId == Guid.Empty)
        {
            ErrorMessage = "Invalid user session. Please log in again.";
            await DisplayMessageWithDelay();
            return;
        }

        currentUser = await userService.GetNameByIdAsync(checkuserId.Value);
        userId = checkuserId.Value;
        Balance = await transactionService.CheckBalance(userId);

        // Load all transactions
        AllTransactions = await transactionService.GetTransactionsByUserIdAsync(userId);
        TotalInFlow = AllTransactions.Where(t => t.Type == "income").Sum(t => int.Parse(t.Amount));
        TotalOutFlow = AllTransactions.Where(t => t.Type == "expense").Sum(t => int.Parse(t.Amount));

        // Load all debts
        AllDebts = await transactionService.GetTransactionsByTypeAsync(userId, "debt");
        TotalDebts = AllDebts.Sum(t => int.Parse(t.Amount));
        ClearedDebt = AllDebts.Where(t => t.Status == "Completed").Sum(t => int.Parse(t.Amount));
        RemainingDebt = AllDebts.Where(t => t.Status == "Incomplete").Sum(t => int.Parse(t.Amount));

        // Get all unique tags for the dropdown
        AllTags = AllTransactions.Select(t => t.Tag).Distinct().ToList();
    }

    private async Task DisplayMessageWithDelay()
    {
        StateHasChanged();
        await Task.Delay(3000);
        ErrorMessage = null;
        SuccessMessage = null;
        StateHasChanged();
    }
}

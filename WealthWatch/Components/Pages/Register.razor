@page "/signup"
@using WealthWatch.Components.Layout
@layout NoNav
@using WealthWatch.Services
@inject UserService userService
@inject NavigationManager NavigationManager
@using WealthWatch.Models

<body class="signup-body">
    <div class="card">
        <h2 class="card-title">Sign Up</h2>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">@ErrorMessage</div>
        }

        <EditForm Model="@user" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="FullName">Full Name</label>
                <input type="text" id="FullName" class="input" @bind="user.FullName" placeholder="Full Name" required />
            </div>

            <div class="form-group">
                <label for="Email">Email</label>
                <input type="email" id="Email" class="input" @bind="user.Email" placeholder="Email" required />
            </div>

            <div class="form-group">
                <label for="Password">Password</label>
                <input type="password" id="Password" class="input" @bind="user.Password" placeholder="Password" required />
            </div>

            <div class="form-group">
                <label for="ConfirmPassword">Confirm Password</label>
                <input type="password" id="ConfirmPassword" class="input" @bind="Confirm_password" placeholder="Confirm Password" required />
            </div>

            <div class="form-group">
                <label for="Currency">Currency Type</label>
                <select id="Currency" class="select" @bind="user.Currency" required>
                    <option value="" disabled selected>Currency Type</option>
                    <option value="usd">USD</option>
                    <option value="eur">EUR</option>
                    <option value="npr">NPR</option>
                    <option value="inr">INR</option>
                </select>
            </div>

            <button type="submit" class="button" @disabled="isLoading">Sign Up</button>
        </EditForm>

        <div class="signup-link">
            Have an account? <a href="/">Login</a>
        </div>
    </div>
</body>

@code {
    private Users user = new Users(); // Bind to this model
    private string? Confirm_password { get; set; } // For password confirmation
    private string? ErrorMessage { get; set; }
    private string? SuccessMessage { get; set; }
    private bool isLoading { get; set; } = false;  // Used to disable the submit button during the request

    private async Task HandleRegistration()
    {
        // Validate passwords match
        if (user.Password != Confirm_password)
        {
            ErrorMessage = "Passwords do not match!";
            StateHasChanged();  // Ensure the UI is updated with the error message
            return;
        }

        isLoading = true;  // Disable the button to prevent multiple submissions
        ErrorMessage = null; // Clear any previous error messages

        // Call the user service to create the user
        int result = await userService.CreateUserAsync(user);
        if (result == 2)
        {
            ErrorMessage = "Email already exists!";
        }
        else if (result == 1)
        {
            SuccessMessage = "User created successfully!";
            NavigationManager.NavigateTo("/"); // Redirect after success
        }
        else
        {
            ErrorMessage = "Registration failed. Please try again.";
        }

        isLoading = false;  // Re-enable the submit button
        StateHasChanged();  // Ensure the UI is updated
    }
}
